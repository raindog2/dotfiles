-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- Load Debian menu entries
require("debian.menu")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Error!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers

-- WORKING: arch, *bamboo, brown, cool-blue, copland, crown, dunzor, dunzor2, *dust, dwm, *elric, fence, foo, gray, green-owl, grey-new, grey-old, him, holo, lined, *multicolor, muted-dream-tree, niceandclean, *obscur, rainbow, *rbown, redhalo, *roig, smoked, snow, spectrum, *tree, *vinyl, *wabbit, wmii, *wombat, worm 

-- NOT WORKING: anon, bio, blackburn, blackburn, blue, blue-black-red, blue-black-red-2, byte, dk-grey, dremora, fhuzing, grey, matrix, powerarrow-darker, sky-grey, steamburn, sunjack, zenburn-custom, zenburn-red

beautiful.init("/home/mpurcell/.config/awesome/themes/obscur/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "x-terminal-emulator --geometry 120x40"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor
--editor_cmd = "vi"

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod1"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating, --1
    awful.layout.suit.tile, --2
    awful.layout.suit.floating, --3
    awful.layout.suit.tile.bottom, --4
    awful.layout.suit.tile.top, --5
    awful.layout.suit.fair, --6
    awful.layout.suit.fair.horizontal, --7
    awful.layout.suit.spiral, --8
    awful.layout.suit.spiral.dwindle, --9
    awful.layout.suit.max, --10
    awful.layout.suit.max.fullscreen, --11
    awful.layout.suit.magnifier --12
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {
   names  = { "1-terms ", "2-www ", "3-email ", "4-office ", "5-vim ", "6-a/v ", "7-news ", "8-irc ", "9-sys " },
   layout = { layouts[8], layouts[1], layouts[3], layouts[3], layouts[2],
              layouts[3], layouts[3], layouts[3], layouts[8]
 }}
 for s = 1, screen.count() do
     -- Each screen has its own tag table.
     tags[s] = awful.tag(tags.names, s, tags.layout)
 end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
--   { "manual", terminal .. " -e man awesome" },
--   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "manual", function () awful.util.spawn('xfce-terminal --command="man awesome"') end },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "#!", debian.menu.Debian_menu.Debian },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" }, " %a, %b %e, %l:%M ")

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey, "Control" }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey, "Control" }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey, "Shift"   }, "z", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey,           }, "w", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

-- Standard program
    awful.key({ modkey,           }, "t", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Shift"   }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),
    awful.key({ modkey, "Shift"   }, "x", function () awful.util.spawn("cb-exit") end),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

-- Launch Programs!!!
    awful.key({ modkey, "Shift"   }, "a", function () awful.util.spawn_with_shell("awesome_autostart.sh") end),
    awful.key({ modkey,           }, "c", function () awful.util.spawn("chromium") end),
    awful.key({ modkey,           }, "g", function () awful.util.spawn("google-chrome") end),
    awful.key({ modkey,           }, "e", function () awful.util.spawn("icedove") end),
    awful.key({ modkey            }, "m", function () awful.util.spawn('xfce4-terminal -T mutt --geometry 119x40 --command="mutt"') end), 
    awful.key({ modkey            }, "r", function () awful.util.spawn('xfce4-terminal -T rainmutt --geometry 119x40 --command="mutt -F ~/.mutt/rainmuttrc"') end), 
    awful.key({ modkey,           }, "f", function () awful.util.spawn("thunar") end), 
    awful.key({ modkey, "Control" }, "g", function () awful.util.spawn("gedit") end), 
    awful.key({ modkey, "Control" }, "m", function () awful.util.spawn('xfce4-terminal -T htop --command="htop"') end),
    awful.key({ modkey, "Control" }, "i", function () awful.util.spawn('xfce4-terminal -T irssi --geometry 119x50 --command="irssi"') end),
    awful.key({ modkey,           }, "n", function () awful.util.spawn("nitrogen") end),
    awful.key({ modkey, "Control" }, "n", function () awful.util.spawn('xfce4-terminal -T newsbeuter --geometry 119x50 --command="newsbeuter"') end),
    awful.key({ modkey, "Control" }, "o", function () awful.util.spawn("libreoffice4.3 --nologo") end), 
    awful.key({ modkey,           }, "p", function () awful.util.spawn("pithos") end),
    --awful.key({ modkey, "Control" }, "t", function () awful.util.spawn("xfce4-terminal") end), 
    awful.key({ modkey, "Control" }, "t", function () awful.util.spawn("tor-browser") end), 
    awful.key({ modkey,           }, "v", function () awful.util.spawn("vlc") end),
    awful.key({ modkey, "Control" }, "v", function () awful.util.spawn("virtualbox") end),
    awful.key({ modkey, "Control" }, "w", function () awful.util.spawn("iceweasel") end),
    awful.key({ modkey, "Control" }, "w", function () awful.util.spawn('xfce4-terminal --command="w3m crunchbang.org"') end), 
--  awful.key({ modkey,           }, "y", function () awful.util.spawn(editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua") end),
    awful.key({ modkey,           }, "y", function () awful.util.spawn('xfce4-terminal --command="vi /home/mpurcell/config/awesome/rc.lua"') end),

-- Prompt to run programs
    awful.key({ modkey            }, "i",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)
--Manipulating clients and their windows
clientkeys = awful.util.table.join(
--  awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey,           }, "z",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
--Shrink a floating client window from the right
    awful.key({ modkey            }, "Home",   function () awful.client.moveresize( 0, 0, -40, -0) end), 
--Enlarge a floating client window to the right
    awful.key({ modkey            }, "End",    function () awful.client.moveresize( 0, 0, 40, -0) end),    
--Shrink a floating client window from the right and bottom (pageup key)
    awful.key({ modkey            }, "Prior",  function () awful.client.moveresize( 0, 0, -0, -40) end),
--Enlarge a floating client window to the right and bottom (the pagedown key)
    awful.key({ modkey            }, "Next",   function () awful.client.moveresize( 0, 0,  0,  40) end),
--Move a floating client window down (no resize)
    awful.key({ modkey            }, "Down",   function () awful.client.moveresize(  0,  20,   0,   0) end),
--Move a floating client window up (no resize)
    awful.key({ modkey            }, "Up",     function () awful.client.moveresize(  0, -20,   0,   0) end),
--Move a floating client window left (no resize)
    awful.key({ modkey            }, "Left",   function () awful.client.moveresize(-20,   0,   0,   0) end),
--Move a floating client window right (no resize)
    awful.key({ modkey            }, "Right",  function () awful.client.moveresize( 20,   0,   0,   0) end),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
--  awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey, "Shift" }, "d", 
        function (c)
            if   c.titlebar then awful.titlebar.remove(c)
            else awful.titlebar.add(c, { modkey = modkey }) end
        end),
    awful.key({ modkey,           }, "a",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "q",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- ====================Rules Table====================
-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     --no gaps between windows:
                     size_hints_honor = false,
                     keys = clientkeys,
                     buttons = clientbuttons } },

    --open in a particular tag in the background:
    { rule = { class = "Pithos" }, properties = { tag = tags[1][6], floating = true, x = 20, y = 40 } },
     
    --open in a particular tag and go to that client:
    { rule = { class = "Google-chrome" }, properties = { tag = tags[1][2], switchtotag = true } },
    { rule = { class = "Chromium" }, properties = { tag = tags[1][2], switchtotag = true } },
    { rule = { class = "Icedove" }, properties = { tag = tags [1][3], switchtotag = true } },
    { rule = { name = "mutt" }, properties = { tag = tags [1][3], switchtotag = true } },
    --{ rule = { name = "rainmutt" }, properties = { tag = tags [2][3], switchtotag = true } },
    { rule = { class = "[Ll]ibre[Oo]ffice*" }, properties = { tag = tags [1][4], switchtotag = true } },
    { rule = { class = "[Gg]imp" }, properties = { floating = true, switchtotag = true, tag = tags [1][6] } },
    { rule = { class = "Vlc" }, properties = { tag = tags [1][6], switchtotag = true } },
    { rule = { class = "VirtualBox" }, properties = { floating = true, tag = tags [1][6], switchtotag = true } },
    { rule = { name = "newsbeuter" }, properties = { floating = true, tag = tags [1][7], switchtotag = true, x = 240, y = 20 } },
    { rule = { name = "irssi" }, properties = { floating = true, tag = tags [1][8], switchtotag = true, x = 40, y = 20 } },
    { rule = { class = "Nitrogen" }, properties = { floating = true, tag = tags [1][9], switchtotag = true, x = 120, y = 40 } },
    { rule = { name = "htop" }, properties = { tag = tags [1][9], switchtotag = true } },

    --make these always open as floating:
    { rule = { class = "Galculator" }, properties = { floating = true } },
    { rule = { class = "Pavucontrol" }, properties = { floating = true } },
    { rule = { name = "File Operation Progress" }, properties = { floating = true } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    --c:add_signal("mouse::enter", function(c)
        --if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            --and awful.client.focus.filter(c) then
            --client.focus = c
        --end
    --end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
awful.util.spawn("awesome_autostart.sh")
